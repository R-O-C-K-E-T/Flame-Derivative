#version 430

layout(local_size_x = LOCAL_SIZE, local_size_y = 1) in;

struct Particle {
	vec2 pos;
	uint lineage[LINEAGE_SIZE];
	float colour[FUNC_COUNT];
	vec2 gradient[PARAM_COUNT]; // list of row major gradients
};

layout (std430, binding = 0) buffer InputBuffer {
	uvec4 initial_rand_state[];
};

layout (std430, binding = 1) writeonly buffer OutputBuffer {
	Particle points_out[];
};

uniform float cutoffs[FUNC_COUNT * FUNC_COUNT];
uniform mat3x2 functions[FUNC_COUNT];
uniform uint offset;

uint TausStep(uint z, int S1, int S2, int S3, uint M) {
    uint b = (((z << S1) ^ z) >> S2);
    return (((z & M) << S3) ^ b);
}

uint LCGStep(uint z, uint A, uint C) {
    return (A * z + C);
}

uint randint(inout uvec4 state) {
	state.x = TausStep(state.x, 13, 19, 12, 4294967294);
    state.y = TausStep(state.y, 2, 25, 4, 4294967288);
    state.z = TausStep(state.z, 3, 11, 17, 4294967280);
    state.w = LCGStep(state.w, 1664525, 1013904223);
	return state.x ^ state.y ^ state.z ^ state.w;
}

float random(inout uvec4 state) {
    return 2.3283064365387e-10 * float(randint(state));
}

void step(inout Particle particle, inout uvec4 rand_state, uint iteration_index) {
	uint prev = (particle.lineage[iteration_index % LINEAGE_SIZE] % FUNC_COUNT) * FUNC_COUNT;

	float cutoff = random(rand_state);
	uint function_index;
	for (function_index = 0; function_index<(FUNC_COUNT - 1); function_index++) {
		if (cutoffs[prev + function_index] > cutoff) break;
	}

	particle.lineage[(iteration_index + 1) % LINEAGE_SIZE] = prev + function_index;

	const mat3x2 function = functions[function_index];
	const mat2 transform = mat2(function[0], function[1]);
	const vec2 offset = function[2];

	vec2 prev_pos = particle.pos;
	particle.pos = transform * prev_pos + offset;

	for (uint i = 0; i<PARAM_COUNT; i++) {
		particle.gradient[i] = transform * particle.gradient[i];
	}


	particle.gradient[function_index * 6 + 0].x += prev_pos.x;
	particle.gradient[function_index * 6 + 1].x += prev_pos.y;
	particle.gradient[function_index * 6 + 2].x += 1;
	
	particle.gradient[function_index * 6 + 3].y += prev_pos.x;
	particle.gradient[function_index * 6 + 4].y += prev_pos.y;
	particle.gradient[function_index * 6 + 5].y += 1;

	
	for (uint i = 0; i<FUNC_COUNT; i++) {
		particle.colour[i] *= 1.0 - FACTOR;
	}
	particle.colour[function_index] += FACTOR;
}

void main() {
	const uint particle_index = uint(gl_LocalInvocationIndex + gl_WorkGroupID.x * LOCAL_SIZE);
	uvec4 rand_state = initial_rand_state[particle_index];

	Particle particle;
	particle.pos = vec2(random(rand_state), random(rand_state));
	particle.lineage[0] = randint(rand_state) % LINEAGE_SIZE;
	for (uint i = 0; i<particle.colour.length; i++) particle.colour[i] = 0.0;
	for (uint i = 0; i<particle.gradient.length; i++) particle.gradient[i] = vec2(0.0);
	
	
	for (uint i = 0; i<20; i++) {
		step(particle, rand_state, i);
	}

	for (uint i = 0; i<ITERATIONS; i++) {
		step(particle, rand_state, i + 20);
		points_out[i*(LOCAL_SIZE*gl_NumWorkGroups.x) + particle_index + offset] = particle;
	}

	initial_rand_state[particle_index].xyzw = rand_state.wxyz;
}
